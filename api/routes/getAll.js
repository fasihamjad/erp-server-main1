const router = require('express').Router()
const controller = require('../controllers')
const { authenticate } = require('../utils/helper')
router.post("/:Controller", authenticate, (req, res) => {
    let myController = req.params.Controller;
    switch (myController) {
        case "user": controller.Users.getAll(req, res); break;
        case "admin_module": controller.AdminModule.getAll(req, res); break;
        case "gender": controller.Gender.getAll(req, res); break;
        case "gender_category": controller.GenderCategory.getAll(req, res); break;
        case "rise_label": controller.RiseLabel.getAll(req, res); break;
        case "getAllStyle": controller.Style.getAllStyle(req, res); break;
        case "wash": controller.Wash.getAll(req, res); break;
        case "fabric": controller.Fabric.getAll(req, res); break;
        case "admin_menu_type": controller.Admin_Menu_Type.getAll(req, res); break;
        case "product_status": controller.Product_Status.getAll(req, res); break;
        case "product_class": controller.Product_Class.getAll(req, res); break;
        case "item_type": controller.Item_Type.getAll(req, res); break;
        case "admin_company": controller.Admin_Company.getAll(req, res); break;
        case "get_admin_menu_user_right": controller.Admin_Menu_User_Rights.getUserRights(req, res); break;
        case "get_company_access": controller.Style.getCompanyAccessBtnClick(req, res); break;
        case "get_company_access_grid": controller.Style.getCompanyAccessGrid(req, res); break;
        case "fit_category": controller.FitCategory.getAll(req, res); break;
        case "cut": controller.Cut.getAll(req, res); break;
        case "rise": controller.Rise.getAll(req, res); break;
        case "inseamLabel": controller.InseamLabel.getAll(req, res); break;
        case "item": controller.Items.getAll(req, res); break;
        case "getDetail": controller.Items.getDetail(req, res); break;
        case "season": controller.Season.getAll(req, res); break;
        case "wash_type": controller.WashType.getAll(req, res); break;
        case "size": controller.Size.getAll(req, res); break;
        case "inseam": controller.Inseam.getAll(req, res); break;
        case "customer": controller.Customer.getAll(req, res); break;
        case "customerBill": controller.CustomerBill.getAll(req, res); break;
        case "customerShip": controller.CustomerShip.getAll(req, res); break;
        case "vendorBill": controller.VendorBill.getAll(req, res); break;
        case "vendorShip": controller.VendorShip.getAll(req, res); break;
        case "log": controller.Logs.getAll(req, res); break;
        case "userCompany": controller.UserCompany.getAll(req, res); break;
        case "customerType": controller.CustomerType.getAll(req, res); break;
        case "orderStatus": controller.OrderStatus.getAll(req, res); break;
        case "customerSale": controller.CustomerSales.getAll(req, res); break;
        case "regionCategory": controller.RegionCategory.getAll(req, res); break;
        case "salesPerson": controller.SalesPerson.getAll(req, res); break;
        case "adminCountry": controller.AdminCountry.getAll(req, res); break;
        case "adminCity": controller.AdminCity.getAll(req, res); break;
        case "adminState": controller.AdminState.getAll(req, res); break;
        case "adminRegion": controller.AdminRegion.getAll(req, res); break;
        case "saleOrderHeader": controller.SaleOrderHeader.getAll(req, res); break;
        case "adminCourierService": controller.AdminCourierService.getAll(req, res); break;
        case "adminFreightTerm": controller.AdminFreightTerm.getAll(req, res); break;
        case "adminShippingMethod": controller.AdminShippingMethod.getAll(req, res); break;
        case "adminLocation": controller.AdminLocation.getAll(req, res); break;
        case "formByCompany": controller.SaleOrderHeader.formByCompany(req, res); break;
        case "adminBerganBilling": controller.AdminBerganBilling.getAll(req, res); break;
        case "saleOrderLine": controller.SaleOrderLine.getAll(req, res); break;
        case "itemByCompany": controller.SaleOrderLine.getItemByCompany(req, res); break;
        case "adminCurrency": controller.AdminCurrency.getAll(req, res); break;
        case "adminJob": controller.AdminJob.getAll(req, res); break;
        case "styleCombination": controller.StyleCombination.getAll(req, res); break;
        case "combinationForm": controller.StyleCombination.getCombinationForm(req, res); break;
        case "headerGender": controller.SaleOrderHeader.genderSelect(req, res); break;
        case "getBillingShipping": controller.SaleOrderHeader.getBillingShipping(req, res); break;
        case "productsSale": controller.SaleOrderHeader.getProducts(req, res); break;
        case "adminShipVia": controller.AdminShipVia.getAll(req, res); break;
        case "customerTerm": controller.CustomerTerm.getAll(req, res); break;
        case "adminShipTaxCode": controller.AdminShipTaxCode.getAll(req, res); break;
        case "getUserRights": controller.Admin_Menu_User_Rights.getUserRightsAll(req, res); break;
        case "adminMenu": controller.AdminMenu.getAll(req, res); break;
        case "parentMenu": controller.AdminMenu.getParentMenu(req, res); break;
        case "adminMenuForm": controller.AdminMenu.getFormAdminMenu(req, res); break;
        case "adminFactor": controller.AdminFactor.getAll(req, res); break;
        case "account": controller.Account.getAll(req, res); break;
        case "adminTax": controller.AdminTax.getAll(req, res); break;
        case "adminDiscount": controller.AdminDiscount.getAll(req, res); break;
        case "customerSearch": controller.SaleOrderHeader.customerSearch(req, res); break;
        case "orderShipHeader": controller.OrderShipHeader.getAll(req, res); break;
        case "shipHeaderFormList": controller.OrderShipHeader.formList(req, res); break;
        case "orderShipLines": controller.OrderShipLines.getAll(req, res); break;
        case "adminUserCompany": controller.AdminUserCompany.getAll(req, res); break;
        case "accountType": controller.AccountType.getAll(req, res); break;
        case "invoiceHeader": controller.InvoiceHeader.getAll(req, res); break;
        case "glPeriod": controller.InvoiceHeader.getGLPeriod(req, res); break;
        case "invoiceLine": controller.InvoiceLine.getAll(req, res); break;
        case "creditLine": controller.CreditLine.getAll(req, res); break;
        case "ptStatus": controller.PTStatus.getAll(req, res); break;
        case "shipStatus": controller.ShipStatus.getAll(req, res); break;
        case "saleReturnHeader": controller.SaleReturnHeader.getAll(req, res); break;
        case "fiscalYear": controller.FiscalYear.getAll(req, res); break;
        case "fiscalYearPeriod": controller.FiscalYearPeriod.getAll(req, res); break;
        case "saleReturnLine": controller.SaleReturnLine.getAll(req, res); break;
        case "adminReturnReason": controller.AdminReturnReason.getAll(req, res); break;
        case "scmBrand": controller.SCMBrand.getAll(req, res); break;
        case "scmFigure": controller.SCMFigure.getAll(req, res); break;
        case "scmSaleTarget": controller.SCMSaleTarget.getAll(req, res); break;
        case "scmTargetMonth": controller.SCMTargetMonth.getAll(req, res); break;
        case "scmTargetYear": controller.SCMTargetYear.getAll(req, res); break;
        case "receiptHeader": controller.ReceiptHeader.getAll(req, res); break;
        case "scmVendor": controller.SCMVendor.getAll(req, res); break;
        case "creditHeader": controller.CreditHeader.getAll(req, res); break;
        case "scmVendorCategory": controller.SCMVendorCategory.getAll(req, res); break;
        case "iNVItemTransferHeader": controller.INVItemTransferHeader.getAll(req, res); break;
        case "iNVItemTransferLine": controller.INVItemTransferLine.getAll(req, res); break;
        case "iNVItemTransferFormData": controller.INVItemTransferHeader.INVItemTransferFormData(req, res); break;
        case "payPurchaseBillHeaderFormData": controller.PayPurchaseBillHeader.formData(req, res); break;
        case "payPurchaseBillHeader": controller.PayPurchaseBillHeader.getAll(req, res); break;
        case "payPurchaseBillItem": controller.PayPurchaseBillItem.getAll(req, res); break;
        case "payPurchaseBillItemExpense": controller.PayPurchaseBillExpense.getAll(req, res); break;
        case "accountExpense": controller.PayPurchaseBillExpense.getAccountExpense(req, res); break;
        case "itemTransaction": controller.Items.getItemTransaction(req, res); break;
        case "customerTransaction": controller.Customer.getCustomerTransaction(req, res); break;
        case "adminReturnType": controller.AdminReturnType.getAll(req, res); break;
        case "reportURL": controller.ReportURL.getAll(req, res); break;
        case "fabricComposition": controller.FabricComposition.getAll(req, res); break;
        case "productType": controller.ProductType.getAll(req, res); break;
        case "fabricClass": controller.FabricClass.getAll(req, res); break;
        case "fabricClass2": controller.FabricClass2.getAll(req, res); break;
        case "fabricType": controller.FabricType.getAll(req, res); break;
        case "fabricUsable": controller.FabricUsable.getAll(req, res); break;
        case "files": controller.FileUpload.getAll(req, res); break;
        case "commitCriteria": controller.CommitCriteria.getAll(req, res); break;
        case "cashBack": controller.CashBack.getAll(req, res); break;
        case "payCustomerPaymentHeader": controller.PayCustomerPaymentHeader.getAll(req, res); break;//javed
        case "payCustomerPaymentInvoice": controller.PayCustomerPaymentInvoice.getAll(req, res); break;
        case "payCustomerPaymentNote": controller.PayCustomerPaymentNote.getAll(req, res); break;
        case "glvoucherheader": controller.VoucherHeader.getAll(req, res); break;
        case "glvoucherline": controller.voucherLine.getAll(req, res); break;
        case "arAccount": controller.ARACCOUNT.getAll(req, res); break;
        case "adminPaymentTypes": controller.AdminPaymentTypes.getAll(req, res); break;
        case "customerPaymentLines": controller.CustomerPaymentLines.getAll(req, res); break;
        case "paymentType": controller.PaymentType.getAll(req, res); break;
        case "AdminPaymentMethod" : controller.AdminPaymentMethod.getAll(req, res); break;
        case "InvStockAdjustmentHeader": controller.InvStockAdjustmentHeader.getAll(req, res); break;
        case "InvStockAdjustmentFormData": controller.InvStockAdjustmentHeader.InvStockAdjustmentFormData(req, res); break;
        case "InvStockAdjustmentLines": controller.InvStockAdjustmentLines.getAll(req,res); break
        case "AdminPaymentMethodType": controller.Adminpaymentmethodtype.getAll(req, res); break;
        case "payBillDirectPaymentItem":controller.PayBillDirectPaymentItem.getAll(req,res);break;
        case "FundTransfer": controller.FundTransferHeader.getAll(req, res); break;
        case "payBillDirectPaymentHeader":controller.PayBillDirectPaymentHeader.getAll(req,res); break;
        case "PayBankDepositHeader": controller.payBankDepositHeader.getAll(req, res); break;
        case "globalSearch": controller.Globalsearch.getAll(req, res); break;
        case "PayBankDepositLines": controller.PayBankDepositLines.getAll(req, res); break;
        case "TermForprint": controller.TermForPrint.getAll(req, res); break;
        case "CreditNoteInvoive" : controller.CreditNoteInvoive.getAll(req, res); break;
        case "getSaleOrderGroupReport": controller.booking.getSaleOrderGroupReport(req, res); break;
        case "getSaleOrderOmsStateReport": controller.booking.getSaleOrderOmsStateReport(req, res); break;
        case "getAccountForStockAdjustment": controller.Account.getAccountForStockAdjustment(req,res); break;
        case "getSaleOrderOmsCustomerByRegionStateReport": controller.booking.getSaleOrderOmsCustomerByRegionStateReport(req,res); break;
        case "getSaleOrderOmsByCustomerReport": controller.booking.getSaleOrderOmsByCustomerReport(req, res); break;
        case "getSalePendingOrderOmsGroupReport" : controller.Pending.getSalePendingOrderOmsGroupReport(req, res); break;
        case "getSalePendingOrderOmsStateReport" : controller.Pending.getSalePendingOrderOmsStateReport(req, res); break;
        case "getSalePendingOrderOmsCustomerByRegionStateReport" : controller.Pending.getSalePendingOrderOmsCustomerByRegionStateReport(req, res); break;
        case "getSalePendingOrderOmsByCustomerReport" : controller.Pending.getSalePendingOrderOmsByCustomerReport(req, res); break;
        case "getBusinessDashboardReport": controller.business.getBusinessDashboardReport(req,res);break;
        case "getBusinessDashboardDetailReport":controller.business.getBusinessDashboardDetailReport(req, res); break;
        case "getPendingSaleOrderOmsReport" : controller.Pending.getPendingSaleOrderOmsReport(req, res); break;
        case "SysReportParameter" : controller.SysReportParameter.getAll(req,res); break;
        case "AdminBarganPaymentTerm": controller.AdminBarganPaymentterm.getAll(req, res); break;
        case "GetSaleOrderPrint": controller.booking.funcGetSaleOrderPrint(req, res); break;
        case "getSaleShipOmsGroupReport": controller.shipping.getSaleShipOmsGroupReport(req, res); break;
        case "getSaleShipOmsStateReport": controller.shipping.getSaleShipOmsStateReport(req, res); break;
        case "getSaleShipOmsCustomerByRegionStateReport": controller.shipping.getSaleShipOmsCustomerByRegionStateReport(req, res); break;
        case "getSaleShipOmsByCustomerReport": controller.shipping.getSaleShipOmsByCustomerReport(req, res); break;
        case "getSalePodOmsReport": controller.pod.getSalePodOmsReport(req, res); break;
        case "getSalePodOmsStateReport": controller.pod.getSalePodOmsStateReport(req, res); break;
        case "getSalePodOmsCustomerByRegionStateReport": controller.pod.getSalePodOmsCustomerByRegionStateReport(req, res); break;
        case "getSalePodOmsByCustomerReport": controller.pod.getSalePodOmsByCustomerReport(req, res); break;
        case "getUserType": controller.Users.getUserType(req, res); break;
        case "getSaleOrderPrint": controller.SaleOrderHeader.getSaleOrderPrint(req, res); break;
        case "getSaleOrderitem": controller.SaleOrderHeader.getSaleOrderitem(req, res); break;
        case "getSaleOrderColumns": controller.SaleOrderHeader.getSaleOrderColumns(req, res); break;
        case "getSaleOrderColumnsValue": controller.SaleOrderHeader.getSaleOrderColumnsValue(req, res); break;
        case "payBillPaymentHeader": controller.PayBillPaymentHeader.getAll(req, res); break;
        case "getStyleWiseStockReport": controller.Stock.getStyleWiseStockReport(req, res); break;
        case "getOneLines": controller.SaleOrderLine.getOneLines(req, res); break;
        case "customerRefundHeader" : controller.customerRefundHeader.getAll(req, res); break;
        case "getSaleReturnOmsGroupReport": controller.Return.getSaleReturnOmsGroupReport(req, res); break;
        case "getSaleReturnStateOmsReport": controller.Return.getSaleReturnStateOmsReport(req, res); break;
        case "getSaleReturnOmsCustomerByRegionStateReport": controller.Return.getSaleReturnOmsCustomerByRegionStateReport(req, res); break;
        case "CustomerNoteForRefund": controller.customerRefundHeader.CustomerNoteForRefund(req, res); break;
        case "CustomerRefundLine": controller.CustomerRefundLine.getAll(req, res); break;
        case "payVendorBillForPayment": controller.PayPurchaseBillHeader.payVendorBillForPayment(req, res); break;
        case "getSaleReturnOmsCustomerByReport": controller.Return.getSaleReturnOmsCustomerByReport(req, res); break;
        case "getOtsSummaryOmsReport": controller.OTS.getOtsSummaryOmsReport(req, res); break;
        case "getOtsDetailReport": controller.OTS.getOtsDetailReport(req, res); break;
        case "payBillPaymentLine": controller.PayBillPaymentLine.getAll(req, res); break;
        case "getNewSeason": controller.Season.getNewSeason(req, res); break;
        case "funcGetPaymentOmsReport": controller.Payment.funcGetPaymentOmsReport(req,res); break;
        case "PayBillDirectPaymentExpense": controller.PayBillDirectPaymentExpense.getAll(req, res); break;
        case "funcGetPaymentInvoiceOmsReport": controller.Payment.funcGetPaymentInvoiceOmsReport(req, res); break;
        case "funcGetSaleComparisonReport": controller.ComparisonReport.funcGetSaleComparisonReport(req, res); break;
        case "funcGetCustomerPaymentLedgerReport": controller.Payment.funcGetCustomerPaymentLedgerReport(req, res); break;
        case "funcGetCreditNoteForInvoiceKnockof": controller.PayCustomerPaymentNote.funcGetCreditNoteForInvoiceKnockof(req, res); break;
        case "funcGetSaleOrderDetailByPoOmsReport": controller.saleOrder.funcGetSaleOrderDetailByPoOmsReport(req, res); break;

        //DB CONNECTION CHECK//
        case "dbconnection": controller.DBConnection.getAll(req, res); break;

    }
})

module.exports = router;