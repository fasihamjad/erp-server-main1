const router = require('express').Router()
const controller = require('../controllers')
// const { validation } = require("../validation/update.validation");
const { authenticate } = require("../utils/helper")

router.put("/:Controller/:Id", authenticate, (req, res) => {
    let myController = req.params.Controller;
    switch (myController) {
        case "user": controller.Users.update(req, res); break;
        case "admin_module": controller.AdminModule.update(req, res); break;
        case "gender": controller.Gender.update(req, res); break;
        case "gender_category": controller.GenderCategory.update(req, res); break;
        case "fit_category": controller.FitCategory.update(req, res); break;
        case "rise_label": controller.RiseLabel.update(req, res); break;
        case "style": controller.Style.update(req, res); break;
        case "wash": controller.Wash.update(req, res); break;
        case "fabric": controller.Fabric.update(req, res); break;
        case "admin_menu_type": controller.Admin_Menu_Type.update(req, res); break;
        case "product_status": controller.Product_Status.update(req, res); break;
        case "product_class": controller.Product_Class.update(req, res); break;
        case "item_type": controller.Item_Type.update(req, res); break;
        case "admin_company": controller.Admin_Company.update(req, res); break;
        case "admin_menu_user_right": controller.Admin_Menu_User_Rights.update(req, res); break;
        case "update_company_access_grid": controller.Style.updateCompanyAccessGrid(req, res); break;
        case "item": controller.Items.update(req, res); break;
        case "season": controller.Season.update(req, res); break;
        case "wash_type": controller.WashType.update(req, res); break;
        case "customer": controller.Customer.update(req, res); break;
        case "customerBill": controller.CustomerBill.update(req, res); break;
        case "customerShip": controller.CustomerShip.update(req, res); break;
        case "customerType": controller.CustomerType.update(req, res); break;
        case "vendorBill": controller.VendorBill.update(req, res); break;
        case "vendorShip": controller.VendorShip.update(req, res); break;
        case "orderStatus": controller.OrderStatus.update(req, res); break;
        case "cut": controller.Cut.update(req, res); break;
        case "customerSale": controller.CustomerSales.update(req, res); break;
        case "rise": controller.Rise.update(req, res); break;
        case "inseamLabel": controller.InseamLabel.update(req, res); break;
        case "regionCategory": controller.RegionCategory.update(req, res); break;
        case "salesPerson": controller.SalesPerson.update(req, res); break;
        case "adminCountry": controller.AdminCountry.update(req, res); break;
        case "inseam": controller.Inseam.update(req, res); break;
        case "size": controller.Size.update(req, res); break;
        case "adminCity": controller.AdminCity.update(req, res); break;
        case "adminState": controller.AdminState.update(req, res); break;
        case "adminRegion": controller.AdminRegion.update(req, res); break;
        case "saleOrderHeader": controller.SaleOrderHeader.update(req, res); break;
        case "adminCourierService": controller.AdminCourierService.update(req, res); break;
        case "adminFreightTerm": controller.AdminFreightTerm.update(req, res); break;
        case "adminShippingMethod": controller.AdminShippingMethod.update(req, res); break;
        case "adminLocation": controller.AdminLocation.update(req, res); break;
        case "adminBerganBilling": controller.AdminBerganBilling.update(req, res); break;
        case "saleOrderLine": controller.SaleOrderLine.update(req, res); break;
        case "styleCombination": controller.StyleCombination.update(req, res); break;
        case "adminShipVia": controller.AdminShipVia.update(req, res); break;
        case "customerTerm": controller.CustomerTerm.update(req, res); break;
        case "adminShipTaxCode": controller.AdminShipTaxCode.update(req, res); break;
        case "adminMenu": controller.AdminMenu.update(req, res); break;
        case "account": controller.Account.update(req, res); break;
        case "adminTax": controller.AdminTax.update(req, res); break;
        case "orderShipHeader": controller.OrderShipHeader.update(req, res); break;
        case "orderShipLines": controller.OrderShipLines.update(req, res); break;
        case "adminUserCompany": controller.AdminUserCompany.update(req, res); break;
        case "accountType": controller.AccountType.update(req, res); break;
        case "invoiceHeader": controller.InvoiceHeader.update(req, res); break;
        case "invoiceLine": controller.InvoiceLine.update(req, res); break;
        case "creditLine": controller.CreditLine.update(req, res); break;
        case "ptStatus": controller.PTStatus.update(req, res); break;
        case "shipStatus": controller.ShipStatus.update(req, res); break;
        case "saleReturnHeader": controller.SaleReturnHeader.update(req, res); break;
        case "fiscalYear": controller.FiscalYear.update(req, res); break;
        case "fiscalYearPeriod": controller.FiscalYearPeriod.update(req, res); break;
        case "saleReturnLine": controller.SaleReturnLine.update(req, res); break;
        case "adminReturnReason": controller.AdminReturnReason.update(req, res); break;
        case "scmBrand": controller.SCMBrand.update(req, res); break;
        case "scmFigure": controller.SCMFigure.update(req, res); break;
        case "scmSaleTarget": controller.SCMSaleTarget.update(req, res); break;
        case "scmTargetMonth": controller.SCMTargetMonth.update(req, res); break;
        case "scmTargetYear": controller.SCMTargetYear.update(req, res); break;
        case "receiptHeader": controller.ReceiptHeader.update(req, res); break;
        case "scmVendor": controller.SCMVendor.update(req, res); break;
        case "receiptLine": controller.ReceiptLine.update(req, res); break;
        case "creditHeader": controller.CreditHeader.update(req, res); break;
        case "scmVendorCategory": controller.SCMVendorCategory.update(req, res); break;
        case "payPurchaseBillHeader": controller.PayPurchaseBillHeader.update(req, res); break;
        case "payPurchaseBillItem": controller.PayPurchaseBillItem.update(req, res); break;
        case "payPurchaseBillItemExpense": controller.PayPurchaseBillExpense.update(req, res); break;
        case "iNVItemTransferHeader": controller.INVItemTransferHeader.update(req, res); break;
        case "iNVItemTransferLine": controller.INVItemTransferLine.update(req, res); break;
        case "adminReturnType": controller.AdminReturnType.update(req, res); break;
        case "fabricComposition": controller.FabricComposition.update(req, res); break;
        case "productType": controller.ProductType.update(req, res); break;
        case "fabricClass": controller.FabricClass.update(req, res); break;
        case "fabricClass2": controller.FabricClass2.update(req, res); break;
        case "fabricType": controller.FabricType.update(req, res); break;
        case "fabricUsable": controller.FabricUsable.update(req, res); break;
        case "commitCriteria": controller.CommitCriteria.update(req, res); break;
        case "cashBack": controller.CashBack.update(req, res); break;
        case "payCustomerPaymentHeader":controller.PayCustomerPaymentHeader.update(req,res);break;//javed
        case "glvoucherheader":controller.VoucherHeader.update(req,res);break;//javed
        case "payCustomerPaymentInvoice":controller.PayCustomerPaymentInvoice.update(req,res);break;
        case "payCustomerPaymentNote":controller.PayCustomerPaymentNote.update(req,res);break;
        case "glvoucherline":controller.voucherLine.update(req,res);break;
        case "payBillPaymentHeader":controller.PayBillPaymentHeader.update(req,res);break;
        case "payBillPaymentLine":controller.PayBillPaymentLine.update(req,res);break;
        case "payBillDirectPaymentHeader":controller.PayBillDirectPaymentHeader.update(req,res);break;
        case "payBillDirectPaymentExpense":controller.PayBillDirectPaymentExpense.update(req,res);break;
        case "payBillDirectPaymentItem":controller.PayBillDirectPaymentItem.update(req,res);break;
        case "paymentType": controller.PaymentType.update(req, res); break;
        case "AdminPaymentMethod": controller.AdminPaymentMethod.update(req, res); break;
        case "InvStockAdjustmentHeader" : controller.InvStockAdjustmentHeader.update(req, res); break;
        case "InvStockAdjustmentLines": controller.InvStockAdjustmentLines.update(req, res); break;
        case "AdminPaymentMethodType": controller.Adminpaymentmethodtype.update(req, res); break;
        case "FundTransfer": controller.FundTransferHeader.update(req, res); break;
        case "PayBankDepositHeader": controller.payBankDepositHeader.update(req, res); break;
        case "PayBankDepositLines": controller.PayBankDepositLines.update(req, res); break;
        case "TermForprint": controller.TermForPrint.update(req, res); break;
        case "CreditNoteInvoive" : controller.CreditNoteInvoive.update(req, res); break;
        case "SysReportParameter" : controller.SysReportParameter.update(req, res); break;
        case "adminCurrency": controller.AdminCurrency.update(req, res); break;
        case "adminFactor": controller.AdminFactor.update(req, res); break;
        case "adminJob": controller.AdminJob.update(req, res); break;
        case "AdminBarganPaymentTerm": controller.AdminBarganPaymentterm.update(req, res); break;
        case "adminDiscount": controller.AdminDiscount.update(req, res); break;
        case "customerRefundHeader" : controller.customerRefundHeader.update(req, res); break;
        case "CustomerRefundLine": controller.CustomerRefundLine.update(req, res); break;
        case "PayBillDirectPaymentExpense": controller.PayBillDirectPaymentExpense.update(req, res); break;
    }
})

module.exports = router;