const router = require('express').Router()
const controller = require('../controllers')
const { authenticate } = require("../utils/helper")
router.get("/:Controller/:Id", authenticate, (req, res) => {
    let myController = req.params.Controller;
    switch (myController) {
        case "user": controller.Users.getOne(req, res); break;
        case "register": controller.Register.getOne(req, res); break;
        case "admin_module": controller.AdminModule.getOne(req, res); break;
        case "gender": controller.Gender.getOne(req, res); break;
        case "gender_category": controller.GenderCategory.getOne(req, res); break;
        case "fit_category": controller.FitCategory.getOne(req, res); break;
        case "rise_label": controller.RiseLabel.getOne(req, res); break;
        case "style": controller.Style.getOne(req, res); break;
        case "wash": controller.Wash.getOne(req, res); break;
        case "fabric": controller.Fabric.getOne(req, res); break;
        case "admin_menu_type": controller.Admin_Menu_Type.getOne(req, res); break;
        case "product_status": controller.Product_Status.getOne(req, res); break;
        case "product_class": controller.Product_Class.getOne(req, res); break;
        case "item_type": controller.Item_Type.getOne(req, res); break;
        case "admin_company": controller.Admin_Company.getOne(req, res); break;
        case "admin_menu_user_right": controller.Admin_Menu_User_Rights.getOne(req, res); break;
        case "cut": controller.Cut.getOne(req, res); break;
        case "rise": controller.Rise.getOne(req, res); break;
        case "item": controller.Items.getOne(req, res); break
        case "season": controller.Season.getOne(req, res); break;
        case "wash_type": controller.WashType.getOne(req, res); break;
        case "getProductCombination": controller.Items.getProductCombination(req, res); break;
        case "size": controller.Size.getOne(req, res); break;
        case "getInseam": controller.Items.getInseam(req, res); break;
        case "getSize": controller.Items.getSize(req, res); break;
        case "customer": controller.Customer.getOne(req, res); break;
        case "customerBill": controller.CustomerBill.getOne(req, res); break;
        case "customerShip": controller.CustomerShip.getOne(req, res); break;
        case "customerType": controller.CustomerType.getOne(req, res); break;
        case "billTo": controller.CustomerBill.getOneBill(req, res); break;
        case "shipTo": controller.CustomerShip.getOneShip(req, res); break;
        case "vendorBill": controller.VendorBill.getOne(req, res); break;
        case "vendorShip": controller.VendorShip.getOne(req, res); break;
        case "vendorbillTo": controller.VendorBill.getOneBill(req, res); break;
        case "vendorshipTo": controller.VendorShip.getOneShip(req, res); break;
        case "orderStatus": controller.OrderStatus.getOne(req, res); break;
        case "cut": controller.Cut.getOne(req, res); break;
        case "customerSale": controller.CustomerSales.getOne(req, res); break;
        case "rise": controller.Rise.getOne(req, res); break;
        case "inseamLabel": controller.InseamLabel.getOne(req, res); break;
        case "regionCategory": controller.RegionCategory.getOne(req, res); break;
        case "salesPerson": controller.SalesPerson.getOne(req, res); break;
        case "adminCountry": controller.AdminCountry.getOne(req, res); break;
        case "inseam": controller.Inseam.getOne(req, res); break;
        case "adminCity": controller.AdminCity.getOne(req, res); break;
        case "adminState": controller.AdminState.getOne(req, res); break;
        case "adminRegion": controller.AdminRegion.getOne(req, res); break;
        case "saleOrderHeader": controller.SaleOrderHeader.getOne(req, res); break;
        case "adminCourierService": controller.AdminCourierService.getOne(req, res); break;
        case "adminFreightTerm": controller.AdminFreightTerm.getOne(req, res); break;
        case "adminShippingMethod": controller.AdminShippingMethod.getOne(req, res); break;
        case "adminLocation": controller.AdminLocation.getOne(req, res); break;
        case "adminBerganBilling": controller.AdminBerganBilling.getOne(req, res); break;
        case "saleOrderLine": controller.SaleOrderLine.getOne(req, res); break;
        case "userCompany": controller.UserCompany.getOne(req, res); break;
        case "styleCombination": controller.StyleCombination.getOne(req, res); break;
        case "adminShipVia": controller.AdminShipVia.getOne(req, res); break;
        case "adminMenu": controller.AdminMenu.getOne(req, res); break;
        case "customerTerm": controller.CustomerTerm.getOne(req, res); break;
        case "adminShipTaxCode": controller.AdminShipTaxCode.getOne(req, res); break;
        case "account": controller.Account.getOne(req, res); break;
        case "adminTax": controller.AdminTax.getOne(req, res); break;
        case "orderShipHeader": controller.OrderShipHeader.getOne(req, res); break;
        case "orderShipment": controller.OrderShipHeader.getOrderShipment(req, res); break;
        case "orderShipmentLine": controller.OrderShipLines.getOrderShipmentLine(req, res); break;
        case "orderShipLines": controller.OrderShipLines.getOne(req, res); break;
        case "adminUserCompany": controller.AdminUserCompany.getOne(req, res); break;
        case "accountType": controller.AccountType.getOne(req, res); break;
        case "invoiceHeader": controller.InvoiceHeader.getOne(req, res); break;
        case "invoiceLine": controller.InvoiceLine.getOne(req, res); break;
        case "invoiceRelatedRecord": controller.InvoiceLine.getSaleInvoiceRelatedRecord(req, res); break; 
        case "creditHeader": controller.CreditHeader.getOne(req, res); break;
        case "creditHeaderDetail": controller.CreditHeader.getCreditHeaderDetail(req, res); break;
        case "getInvoiceDetail": controller.InvoiceHeader.getInvoiceDetail(req, res); break;
        case "getInvoiceLineDetail": controller.InvoiceLine.getInvoiceLineDetail(req, res); break;
        case "creditLine": controller.CreditLine.getOne(req, res); break;
        case "getCreditLineDetail": controller.CreditLine.getCreditLinesDetail(req, res); break;
        case "ptStatus": controller.PTStatus.getOne(req, res); break;
        case "shipStatus": controller.ShipStatus.getOne(req, res); break;
        case "saleReturnHeader": controller.SaleReturnHeader.getOne(req, res); break;
        case "getSaleHeaderDetail": controller.SaleReturnHeader.getSaleHeaderDetail(req, res); break;
        case "fiscalYear": controller.FiscalYear.getOne(req, res); break;
        case "fiscalYearPeriod": controller.FiscalYearPeriod.getOne(req, res); break;
        case "saleReturnLines": controller.SaleReturnLine.getSaleReturnLines(req, res); break;
        case "SaleReturnRelatedTransaction": controller.SaleReturnLine.getSaleReturnRelatedTransaction(req, res); break;
        case "saleReturnLine": controller.SaleReturnLine.getOne(req, res); break;
        case "adminReturnReason": controller.AdminReturnReason.getOne(req, res); break;
        case "scmBrand": controller.SCMBrand.getOne(req, res); break;
        case "scmFigure": controller.SCMFigure.getOne(req, res); break;
        case "scmSaleTarget": controller.SCMSaleTarget.getOne(req, res); break;
        case "scmTargetMonth": controller.SCMTargetMonth.getOne(req, res); break;
        case "scmTargetYear": controller.SCMTargetYear.getOne(req, res); break;
        case "receiptHeader": controller.ReceiptHeader.getOne(req, res); break;
        case "receiptHeaderDetail": controller.ReceiptHeader.getReceiptHeaderDetail(req, res); break;
        case "receiptLines": controller.ReceiptLine.getReceiptLines(req, res); break;
        case "receiptLinesDetail": controller.ReceiptLine.getReceiptLinesDetail(req, res); break;
        case "scmVendor": controller.SCMVendor.getOne(req, res); break;
        case "scmVendorCategory": controller.SCMVendorCategory.getOne(req, res); break;
        case "payPurchaseBillHeader": controller.PayPurchaseBillHeader.getOne(req, res); break;
        case "payPurchaseBillItem": controller.PayPurchaseBillItem.getOne(req, res); break;
        case "payPurchaseBillItemExpense": controller.PayPurchaseBillExpense.getOne(req, res); break;
        case "iNVItemTransferHeader": controller.INVItemTransferHeader.getOne(req, res); break;
        case "iNVItemTransferLine": controller.INVItemTransferLine.getOne(req, res); break;
        case "adminReturnType": controller.AdminReturnType.getOne(req, res); break;
        case "fabricComposition": controller.FabricComposition.getOne(req, res); break;
        case "productType": controller.ProductType.getOne(req, res); break;
        case "fabricClass": controller.FabricClass.getOne(req, res); break;
        case "fabricClass2": controller.FabricClass2.getOne(req, res); break;
        case "fabricType": controller.FabricType.getOne(req, res); break;
        case "fabricUsable": controller.FabricUsable.getOne(req, res); break;
        case "file": controller.FileUpload.getOne(req, res); break;
        case "commitCriteria": controller.CommitCriteria.getOne(req, res); break;
        case "cashBack": controller.CashBack.getOne(req, res); break;
        case "payCustomerPaymentHeader": controller.PayCustomerPaymentHeader.getOne(req, res); break;//javed
        case "payCustomerPaymentInvoice": controller.PayCustomerPaymentInvoice.getOne(req, res); break;
        case "payCustomerPaymentNote": controller.PayCustomerPaymentNote.getOne(req, res); break;
        case "glvoucherheader": controller.VoucherHeader.getOne(req, res); break;
        case "glvoucherline": controller.voucherLine.getOne(req, res); break;
        case "customerPaymentLines": controller.CustomerPaymentLines.getOne(req, res); break;
        case "paymentType": controller.PaymentType.getOne(req, res); break;
        case "AdminPaymentMethod": controller.AdminPaymentMethod.getOne(req, res); break;
        case "InvStockAdjustmentHeader":controller.InvStockAdjustmentHeader.getOne(req, res); break;
        case "creditHeaderDetail": controller.InvStockAdjustmentHeader.getCreditHeaderDetail(req, res); break;
        case "InvStockAdjustmentLines": controller.InvStockAdjustmentLines.getOne(req,res); break;
        case "InvStockAdjustmentLines": controller.InvStockAdjustmentLines.getSaleReturnLines(req, res); break;
        case "AdminPaymentMethodType": controller.Adminpaymentmethodtype.getOne(req, res); break;
        case "payBillDirectPaymentItem":controller.PayBillDirectPaymentItem.getOne(req,res);break;
        case "FundTransfer": controller.FundTransferHeader.getOne(req, res); break;
        case "payBillDirectPaymentHeader": controller.PayBillDirectPaymentHeader.getOne(req,res); break;
        case "saleOrderRelatedRecord": controller.SaleOrderLine.getSaleOrderRelatedRecord(req, res); break;
        case "PayBankDepositHeader": controller.payBankDepositHeader.getOne(req, res); break;
        case "PayBankDepositLines": controller.PayBankDepositLines.getOne(req, res); break;
        case "TermForprint": controller.TermForPrint.getOne(req,res); break;
        case "CreditNoteInvoive" : controller.CreditNoteInvoive.getOne(req, res); break;
        case "SysReportParameter" : controller.SysReportParameter.getOne(req,res); break;
        case "adminCurrency": controller.AdminCurrency.getOne(req, res); break;
        case "adminFactor": controller.AdminFactor.getOne(req, res); break;
        case "adminJob": controller.AdminJob.getOne(req, res); break;
        case "AdminBarganPaymentTerm": controller.AdminBarganPaymentterm.getOne(req, res); break;
        case "adminDiscount": controller.AdminDiscount.getOne(req, res); break;
        case "payBillPaymentHeader": controller.PayBillPaymentHeader.getOne(req, res); break;
        case "customerRefundHeader" : controller.customerRefundHeader.getOne(req, res); break;
        case "CustomerRefundLine": controller.CustomerRefundLine.getOne(req, res); break;
        case "payBillPaymentLine": controller.PayBillPaymentLine.getOne(req, res); break;
        case "PayBillDirectPaymentExpense": controller.PayBillDirectPaymentExpense.getOne(req, res); break;


        ////////test/////////////
        case "test": controller.ComparisonReport.test(req, res); break;
        case "test2": controller.ComparisonReport.test2(req, res); break;
    }
})

module.exports = router;