const router = require('express').Router()
const controller = require('../controllers')
const { validation } = require("../validation/create.validation");
const { authenticate } = require('../utils/helper')

router.post("/:Controller", authenticate, (req, res) => {
    let myController = req.params.Controller;
    switch (myController) {
        //case "user": controller.Users.create(req,res); break;
        case "admin_module": controller.AdminModule.create(req, res); break;
        case "menu": controller.Menu.create(req, res); break;
        case "gender": controller.Gender.create(req, res); break;
        case "gender_category": controller.GenderCategory.create(req, res); break;
        case "fit_category": controller.FitCategory.create(req, res); break;
        case "rise_label": controller.RiseLabel.create(req, res); break;
        case "style": controller.Style.create(req, res); break;
        case "wash": controller.Wash.create(req, res); break;
        case "fabric": controller.Fabric.create(req, res); break;
        case "admin_menu_type": controller.Admin_Menu_Type.create(req, res); break;
        case "product_status": controller.Product_Status.create(req, res); break;
        case "product_class": controller.Product_Class.create(req, res); break;
        case "item_type": controller.Item_Type.create(req, res); break;
        case "admin_company": controller.Admin_Company.create(req, res); break;
        case "admin_menu_user_right": controller.Admin_Menu_User_Rights.create(req, res); break;
        case "company_access": controller.Style.createCompanyAccess(req, res); break;
        case "item": controller.Items.create(req, res); break;
        case "createInseam": controller.Items.createInseam(req, res); break;
        case "createSize": controller.Items.createSize(req, res); break;
        case "season": controller.Season.create(req, res); break;
        case "wash_type": controller.WashType.create(req, res); break;
        case "generate": controller.Items.generateProduct(req, res); break;
        case "size": controller.Size.create(req, res); break;
        case "updateInseam": controller.Items.updateInseam(req, res); break;
        case "updateSize": controller.Items.updateSize(req, res); break;
        case "customer": controller.Customer.create(req, res); break;
        case "customerBill": controller.CustomerBill.create(req, res); break;
        case "customerShip": controller.CustomerShip.create(req, res); break;
        case "customerType": controller.CustomerType.create(req, res); break;
        case "vendorBill": controller.VendorBill.create(req, res); break;
        case "vendorShip": controller.VendorShip.create(req, res); break;
        case "orderStatus": controller.OrderStatus.create(req, res); break;
        case "cut": controller.Cut.create(req, res); break;
        case "customerSale": controller.CustomerSales.create(req, res); break;
        case "rise": controller.Rise.create(req, res); break;
        case "inseam": controller.Inseam.create(req, res); break;
        case "inseamLabel": controller.InseamLabel.create(req, res); break;
        case "regionCategory": controller.RegionCategory.create(req, res); break;
        case "salesPerson": controller.SalesPerson.create(req, res); break;
        case "adminCountry": controller.AdminCountry.create(req, res); break;
        case "adminCity": controller.AdminCity.create(req, res); break;
        case "adminState": controller.AdminState.create(req, res); break;
        case "adminRegion": controller.AdminRegion.create(req, res); break;
        case "saleOrderHeader": controller.SaleOrderHeader.create(req, res); break;
        case "adminCourierService": controller.AdminCourierService.create(req, res); break;
        case "adminFreightTerm": controller.AdminFreightTerm.create(req, res); break;
        case "adminShippingMethod": controller.AdminShippingMethod.create(req, res); break;
        case "adminLocation": controller.AdminLocation.create(req, res); break;
        case "adminBerganBilling": controller.AdminBerganBilling.create(req, res); break;
        case "saleOrderLine": controller.SaleOrderLine.create(req, res); break;
        case "styleCombination": controller.StyleCombination.create(req, res); break;
        case "adminShipVia": controller.AdminShipVia.create(req, res); break;
        case "customerTerm": controller.CustomerTerm.create(req, res); break;
        case "adminShipTaxCode": controller.AdminShipTaxCode.create(req, res); break;
        case "saveUserRights": controller.Admin_Menu_User_Rights.saveUserRights(req, res); break;
        case "adminMenu": controller.AdminMenu.create(req, res); break;
        case "account": controller.Account.create(req, res); break;
        case "adminTax": controller.AdminTax.create(req, res); break;
        case "orderShipHeader": controller.OrderShipHeader.create(req, res); break;
        case "orderShipLines": controller.OrderShipLines.create(req, res); break;
        case "adminUserCompany": controller.AdminUserCompany.create(req, res); break;
        case "accountType": controller.AccountType.create(req, res); break;
        case "invoiceHeader": controller.InvoiceHeader.create(req, res); break;
        case "invoiceLine": controller.InvoiceLine.create(req, res); break;
        case "creditLine": controller.CreditLine.create(req, res); break;
        case "ptStatus": controller.PTStatus.create(req, res); break;
        case "shipStatus": controller.ShipStatus.create(req, res); break;
        case "saleReturnHeader": controller.SaleReturnHeader.create(req, res); break;
        case "fiscalYear": controller.FiscalYear.create(req, res); break;
        case "fiscalYearPeriod": controller.FiscalYearPeriod.create(req, res); break;
        case "saleReturnLine": controller.SaleReturnLine.create(req, res); break;
        case "adminReturnReason": controller.AdminReturnReason.create(req, res); break;
        case "scmBrand": controller.SCMBrand.create(req, res); break;
        case "scmFigure": controller.SCMFigure.create(req, res); break;
        case "scmSaleTarget": controller.SCMSaleTarget.create(req, res); break;
        case "scmTargetMonth": controller.SCMTargetMonth.create(req, res); break;
        case "scmTargetYear": controller.SCMTargetYear.create(req, res); break;
        case "receiptHeader": controller.ReceiptHeader.create(req, res); break;
        case "receiptLine": controller.ReceiptLine.create(req, res); break;
        case "scmVendor": controller.SCMVendor.create(req, res); break;
        case "creditHeader": controller.CreditHeader.create(req, res); break;
        case "scmVendorCategory": controller.SCMVendorCategory.create(req, res); break;
        case "payPurchaseBillHeader": controller.PayPurchaseBillHeader.create(req, res); break;
        case "payPurchaseBillItem": controller.PayPurchaseBillItem.create(req, res); break;
        case "payPurchaseBillItemExpense": controller.PayPurchaseBillExpense.create(req, res); break;
        case "iNVItemTransferHeader": controller.INVItemTransferHeader.create(req, res); break;
        case "iNVItemTransferLine": controller.INVItemTransferLine.create(req, res); break;
        case "adminReturnType": controller.AdminReturnType.create(req, res); break;
        case "fabricComposition": controller.FabricComposition.create(req, res); break;
        case "productType": controller.ProductType.create(req, res); break;
        case "fabricClass": controller.FabricClass.create(req, res); break;
        case "fabricClass2": controller.FabricClass2.create(req, res); break;
        case "fabricType": controller.FabricType.create(req, res); break;
        case "fabricUsable": controller.FabricUsable.create(req, res); break;
        case "commitCriteria": controller.CommitCriteria.create(req, res); break;
        case "cashBack": controller.CashBack.create(req, res); break;
        case "payCustomerPaymentHeader":controller.PayCustomerPaymentHeader.create(req,res);break;//javed
        case "payCustomerPaymentInvoice":controller.PayCustomerPaymentInvoice.create(req,res);break;
        case "payCustomerPaymentNote":controller.PayCustomerPaymentNote.create(req,res);break;
        case "glvoucherheader":controller.VoucherHeader.create(req,res);break;
        case "glvoucherline":controller.voucherLine.create(req,res);break;
        case "payBillPaymentHeader":controller.PayBillPaymentHeader.create(req,res);break;
        case "payBillPaymentLine":controller.PayBillPaymentLine.create(req,res);break;
        case "payBillDirectPaymentHeader":controller.PayBillDirectPaymentHeader.create(req,res);break;
        case "payBillDirectPaymentItem":controller.PayBillDirectPaymentItem.create(req,res);break;
        case "paymentType": controller.PaymentType.create(req, res); break;
        case "AdminPaymentMethod": controller.AdminPaymentMethod.create(req, res); break;
        case "InvStockAdjustmentHeader": controller.InvStockAdjustmentHeader.create(req, res); break;  
        case "InvStockAdjustmentLines": controller.InvStockAdjustmentLines.create(req,res); break;
        case "AdminPaymentMethodType" : controller.Adminpaymentmethodtype.create(req, res); break;
        case "FundTransfer": controller.FundTransferHeader.create(req, res); break;
        case "PayBankDepositHeader": controller.payBankDepositHeader.create(req, res); break;
        case "PayBankDepositLines": controller.PayBankDepositLines.create(req, res); break;
        case "TermForprint": controller.TermForPrint.create(req, res); break;
        case "CreditNoteInvoive" : controller.CreditNoteInvoive.create(req, res); break;
        case "SysReportParameter" : controller.SysReportParameter.create(req, res); break;
        case "adminCurrency": controller.AdminCurrency.create(req, res); break;
        case "adminFactor": controller.AdminFactor.create(req, res); break;
        case "adminJob": controller.AdminJob.create(req, res); break;
        case "AdminBarganPaymentTerm": controller.AdminBarganPaymentterm.create(req, res); break;
        case "adminDiscount": controller.AdminDiscount.create(req, res); break;
        case "customerRefundHeader" : controller.customerRefundHeader.create(req, res); break;
        case "CustomerRefundLine": controller.CustomerRefundLine.create(req, res); break; 
        case "PayBillDirectPaymentExpense": controller.PayBillDirectPaymentExpense.create(req, res); break;

    }
})

module.exports = router;